[gd_scene load_steps=10 format=3 uid="uid://brd30kqex7qri"]

[ext_resource type="Texture2D" uid="uid://b2nlwbckvba2r" path="res://Assets/world-tileset.png" id="1_k477h"]
[ext_resource type="PackedScene" uid="uid://bhoi3qh3udie5" path="res://Scenes/arcane_flux.tscn" id="1_kl6i7"]
[ext_resource type="PackedScene" uid="uid://ckl4xhjuswana" path="res://Scenes/player.tscn" id="2_i306c"]
[ext_resource type="PackedScene" uid="uid://bkh5hqdgl8jhb" path="res://Scenes/portal.tscn" id="7_rtgkr"]

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lq2f6"]
texture = ExtResource("1_k477h")
1:1/0 = 0
1:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:1/0/physics_layer_0/angular_velocity = 0.0
1:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:1/0 = 0
2:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:1/0/physics_layer_0/angular_velocity = 0.0
2:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:1/0 = 0
4:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:1/0/physics_layer_0/angular_velocity = 0.0
4:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:1/0 = 0
5:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
5:1/0/physics_layer_0/angular_velocity = 0.0
5:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:2/0 = 0
1:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:2/0/physics_layer_0/angular_velocity = 0.0
1:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -1, 8, -1, 8, 8, -8, 8)
2:2/0 = 0
2:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:2/0/physics_layer_0/angular_velocity = 0.0
2:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -1, 8, -1, 8, 8, -8, 8)
4:2/0 = 0
4:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:2/0/physics_layer_0/angular_velocity = 0.0
4:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -1, 8, -1, 8, 8, -8, 8)
5:2/0 = 0
5:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
5:2/0/physics_layer_0/angular_velocity = 0.0
5:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -1, 8, -1, 8, 8, -8, 8)

[sub_resource type="TileSet" id="TileSet_0lxgf"]
physics_layer_0/collision_layer = 3
physics_layer_0/collision_mask = 3
sources/0 = SubResource("TileSetAtlasSource_lq2f6")

[sub_resource type="GDScript" id="GDScript_mgfw8"]
script/source = "extends Label


"

[sub_resource type="Shader" id="Shader_t7hyg"]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	

	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qsn2d"]
shader = SubResource("Shader_t7hyg")
shader_parameter/overlay = false
shader_parameter/scanlines_opacity = 0.21
shader_parameter/scanlines_width = 0.052
shader_parameter/grille_opacity = 0.17
shader_parameter/resolution = Vector2(640, 480)
shader_parameter/pixelate = false
shader_parameter/roll = false
shader_parameter/roll_speed = 0.0
shader_parameter/roll_size = 0.0
shader_parameter/roll_variation = 0.1
shader_parameter/distort_intensity = 0.0
shader_parameter/noise_opacity = 0.0
shader_parameter/noise_speed = 5.0
shader_parameter/static_noise_intensity = 0.06
shader_parameter/aberration = 0.00100005
shader_parameter/brightness = 1.4
shader_parameter/discolor = false
shader_parameter/warp_amount = 0.2
shader_parameter/clip_warp = false
shader_parameter/vignette_intensity = 0.4
shader_parameter/vignette_opacity = 0.5

[node name="Node2D" type="Node2D"]
position = Vector2(435, 248)

[node name="TileMap" type="TileMap" parent="."]
position = Vector2(-435, -248)
scale = Vector2(2, 2)
tile_set = SubResource("TileSet_0lxgf")
format = 2
layer_0/tile_data = PackedInt32Array(1441810, 131072, 1, 1441811, 65536, 1, 1441812, 65536, 1, 1441813, 65536, 1, 1507349, 65536, 1, 1507350, 65536, 1, 1507351, 327680, 1, 1507352, 262144, 1, 1507353, 131072, 1, 1507354, 262144, 1, 1507355, 65536, 1, 1507356, 131072, 1, 1507357, 65536, 1, 1507358, 131072, 1, 1507359, 65536, 1, 1507360, 131072, 1, 1507361, 131072, 1, 1507362, 65536, 1, 1507363, 65536, 1, 1441827, 65536, 1, 1441828, 65536, 1, 1441829, 131072, 1, 1441830, 131072, 1, 1441831, 131072, 1, 1507367, 131072, 1, 1507368, 131072, 1, 1507369, 131072, 1, 1507370, 131072, 1, 1441832, 131072, 1, 1441833, 131072, 1, 1376297, 65536, 1, 1310761, 131072, 1, 1310762, 131072, 1, 1245226, 65536, 1, 1245227, 131072, 1, 1179691, 262144, 1, 1114155, 65536, 1, 1376275, 131072, 1, 1376274, 131072, 1, 1310737, 65536, 1, 1245201, 131072, 1, 1245200, 65536, 1, 1179664, 65536, 1, 1179663, 131072, 1, 1114127, 131072, 1, 1114126, 131072, 1, 1048590, 131072, 1, 1048589, 65536, 1, 983052, 131072, 1, 1245221, 65536, 1, 1245220, 65536, 1, 1245219, 65536, 1, 1310755, 65536, 1, 1310754, 131072, 1, 1310753, 131072, 1, 1310752, 131072, 1, 1310751, 65536, 1, 1245204, 131072, 1, 1245205, 131072, 1, 1245206, 65536, 1, 1245207, 131072, 1, 1245208, 131072, 1, 1048613, 65536, 1, 1048612, 65536, 1, 1048611, 65536, 1, 1048610, 131072, 1, 1048609, 65536, 1, 1048608, 65536, 1, 1245209, 65536, 2, 1245210, 65536, 2, 1245211, 65536, 2, 1048607, 131072, 2, 1048606, 65536, 2, 1048605, 65536, 2, 1179687, 131072, 1, 1114151, 131072, 2, 1310744, 131072, 1, 1376280, 131072, 1, 1441816, 262144, 1, 983051, 131072, 1, 1048587, 131072, 1, 1114123, 131072, 1, 1179659, 65536, 1, 1245195, 65536, 1, 1310731, 131072, 1, 1376267, 131072, 1, 1441803, 65536, 1, 1507339, 131072, 1, 1048588, 65536, 1, 1114124, 131072, 1, 1179660, 131072, 1, 1245196, 131072, 1, 1310732, 65536, 1, 1376268, 131072, 1, 1441804, 131072, 1, 1507340, 65536, 1, 983053, 131072, 1, 1114125, 131072, 1, 1179661, 131072, 1, 1245197, 65536, 1, 1310733, 131072, 1, 1376269, 65536, 1, 1441805, 65536, 1, 1507341, 65536, 1, 983054, 65536, 1, 1179662, 131072, 1, 1245198, 131072, 1, 1310734, 65536, 1, 1376270, 65536, 1, 1441806, 65536, 1, 1507342, 65536, 1, 983055, 65536, 1, 1048591, 131072, 1, 1245199, 65536, 1, 1310735, 65536, 1, 1376271, 65536, 1, 1441807, 131072, 1, 1507343, 131072, 1, 983056, 65536, 1, 1048592, 65536, 1, 1114128, 131072, 1, 1310736, 131072, 1, 1376272, 65536, 1, 1441808, 65536, 1, 1507344, 131072, 1, 983057, 65536, 1, 1048593, 65536, 1, 1114129, 65536, 1, 1179665, 131072, 1, 1376273, 131072, 1, 1441809, 131072, 1, 1507345, 65536, 1, 983058, 131072, 1, 1048594, 131072, 1, 1114130, 131072, 1, 1179666, 131072, 1, 1245202, 131072, 1, 1310738, 65536, 1, 1507346, 65536, 1, 983059, 65536, 1, 1048595, 131072, 1, 1114131, 65536, 1, 1179667, 131072, 1, 1245203, 65536, 1, 1310739, 65536, 1, 1507347, 65536, 1, 1572880, 65536, 1, 1572881, 131072, 1, 1572882, 65536, 1, 1572883, 131072, 1, 1507348, 131072, 1, 1572884, 131072, 1, 1572885, 131072, 1, 1441814, 131072, 1, 1572886, 65536, 1, 1441815, 327680, 1, 1572887, 65536, 1, 1572888, 65536, 1, 1441817, 65536, 1, 1572889, 131072, 1, 1441818, 65536, 1, 1572890, 131072, 1, 1441819, 131072, 1, 1572891, 131072, 1, 1441820, 65536, 1, 1572892, 65536, 1, 1441821, 131072, 1, 1572893, 131072, 1, 1441822, 65536, 1, 1572894, 131072, 1, 1441823, 131072, 1, 1572895, 131072, 1, 1441824, 131072, 1, 1572896, 131072, 1, 1441825, 65536, 1, 1572897, 131072, 1, 1441826, 131072, 1, 1572898, 131072, 1, 1572899, 65536, 1, 1507364, 131072, 1, 1572900, 65536, 1, 1507365, 131072, 1, 1572901, 131072, 1, 1507366, 131072, 1, 1572902, 131072, 1, 1572903, 65536, 1, 1572904, 131072, 1, 1572905, 131072, 1, 1441834, 65536, 1, 1572906, 131072, 1, 852009, 131072, 1, 917545, 131072, 1, 983081, 131072, 1, 1048617, 65536, 1, 1114153, 131072, 1, 1179689, 65536, 1, 1245225, 65536, 1, 852010, 131072, 1, 917546, 131072, 1, 983082, 65536, 1, 1048618, 65536, 1, 1114154, 131072, 1, 1179690, 131072, 1, 1376298, 131072, 1, 852011, 327680, 1, 917547, 262144, 1, 983083, 262144, 1, 1048619, 65536, 1, 1310763, 131072, 1, 1376299, 65536, 1, 1441835, 131072, 1, 1507371, 131072, 1, 1572907, 65536, 1, 852012, 262144, 1, 917548, 327680, 1, 983084, 327680, 1, 1048620, 327680, 1, 1114156, 65536, 1, 1179692, 327680, 1, 1245228, 65536, 1, 1310764, 131072, 1, 1376300, 65536, 1, 1441836, 131072, 1, 1507372, 65536, 1, 1572908, 65536, 1, 852013, 131072, 1, 917549, 327680, 1, 983085, 327680, 1, 1048621, 262144, 1, 1114157, 131072, 1, 1179693, 262144, 1, 1245229, 65536, 1, 1310765, 65536, 1, 1376301, 65536, 1, 1441837, 65536, 1, 1507373, 131072, 1, 1572909, 65536, 1, 458763, 131072, 1, 524299, 131072, 1, 589835, 65536, 1, 655371, 131072, 1, 720907, 131072, 1, 786443, 65536, 1, 851979, 65536, 1, 917515, 131072, 1, 458764, 131072, 1, 524300, 65536, 1, 589836, 65536, 1, 655372, 131072, 1, 720908, 131072, 1, 786444, 131072, 1, 851980, 131072, 1, 917516, 131072, 1, 458765, 65536, 1, 524301, 131072, 1, 589837, 65536, 1, 655373, 131072, 1, 720909, 65536, 1, 786445, 65536, 1, 851981, 65536, 1, 917517, 65536, 1, 262167, 131072, 1, 327703, 327680, 1, 393239, 262144, 1, 458775, 327680, 1, 262168, 327680, 1, 327704, 131072, 1, 393240, 131072, 1, 458776, 327680, 1, 262169, 131072, 1, 327705, 65536, 1, 393241, 65536, 1, 458777, 327680, 1, 262170, 65536, 1, 327706, 65536, 1, 393242, 262144, 1, 458778, 327680, 1, 262171, 262144, 1, 327707, 327680, 1, 393243, 262144, 1, 458779, 327680, 1, 262172, 262144, 1, 327708, 262144, 1, 393244, 327680, 1, 458780, 262144, 1, 262173, 327680, 1, 327709, 327680, 1, 393245, 262144, 1, 458781, 327680, 1, 262174, 262144, 1, 327710, 262144, 1, 393246, 327680, 1, 458782, 262144, 1, 262175, 262144, 1, 327711, 262144, 1, 393247, 327680, 1, 458783, 327680, 1, 262176, 262144, 1, 327712, 262144, 1, 393248, 262144, 1, 458784, 262144, 1, 262177, 262144, 1, 327713, 327680, 1, 393249, 262144, 1, 458785, 327680, 1, 262178, 327680, 1, 327714, 262144, 1, 393250, 262144, 1, 458786, 262144, 1, 262179, 262144, 1, 327715, 262144, 1, 393251, 327680, 1, 458787, 262144, 1, 262180, 262144, 1, 327716, 262144, 1, 393252, 262144, 1, 458788, 262144, 1, 262181, 327680, 1, 327717, 327680, 1, 393253, 327680, 1, 458789, 327680, 1, 262182, 262144, 1, 327718, 262144, 1, 393254, 327680, 1, 458790, 262144, 1, 262183, 327680, 1, 327719, 262144, 1, 393255, 262144, 1, 458791, 262144, 1, 262184, 262144, 1, 327720, 327680, 1, 393256, 327680, 1, 458792, 262144, 1, 262185, 262144, 1, 327721, 262144, 1, 393257, 327680, 1, 458793, 262144, 1, 262186, 327680, 1, 327722, 327680, 1, 393258, 327680, 1, 458794, 327680, 1, 262187, 327680, 1, 327723, 327680, 1, 393259, 327680, 1, 458795, 327680, 1, 262188, 327680, 1, 327724, 327680, 1, 393260, 262144, 1, 458796, 262144, 1, 262189, 327680, 1, 327725, 327680, 1, 393261, 327680, 1, 458797, 262144, 1, 524330, 327680, 1, 589866, 262144, 1, 655402, 327680, 1, 720938, 262144, 1, 786474, 327680, 1, 524331, 262144, 1, 589867, 327680, 1, 655403, 262144, 1, 720939, 327680, 1, 786475, 131072, 1, 524332, 327680, 1, 589868, 262144, 1, 655404, 327680, 1, 720940, 262144, 1, 786476, 262144, 1, 524333, 262144, 1, 589869, 327680, 1, 655405, 262144, 1, 720941, 262144, 1, 786477, 262144, 1, 720916, 327680, 1, 720917, 262144, 1, 720918, 327680, 1, 720919, 262144, 1, 720920, 262144, 1, 720921, 262144, 1, 851994, 262144, 1, 851995, 327680, 1, 851996, 262144, 1, 851997, 262144, 1, 851998, 262144, 1, 851999, 262144, 1, 852000, 262144, 2, 852001, 262144, 2, 720922, 262144, 2, 983076, 65536, 2, 917520, 65536, 2, 917522, 65536, 2, 1179671, 65536, 2, 1245216, 65536, 2, 1376284, 131072, 2, 852007, 131072, 2, 852008, 131072, 2, 720936, 65536, 1, 720937, 65536, 1, 262155, 65536, 1, 327691, 65536, 1, 393227, 65536, 1, 262156, 131072, 1, 327692, 131072, 1, 393228, 131072, 1, 262157, 131072, 1, 327693, 65536, 1, 393229, 65536, 1, 262158, 65536, 1, 327694, 65536, 1, 393230, 131072, 1, 262159, 65536, 1, 327695, 131072, 1, 393231, 65536, 1, 262160, 65536, 1, 327696, 65536, 1, 393232, 65536, 1, 262161, 131072, 1, 327697, 65536, 1, 393233, 131072, 1, 262162, 131072, 1, 327698, 65536, 1, 393234, 131072, 1, 262163, 131072, 1, 327699, 131072, 1, 393235, 65536, 1, 262164, 65536, 1, 327700, 131072, 1, 393236, 131072, 1, 262165, 262144, 1, 327701, 65536, 1, 393237, 131072, 1, 262166, 327680, 1, 327702, 131072, 1, 393238, 262144, 1, 589839, 327680, 2, 589840, 262144, 2, 589841, 65536, 2, 589842, 131072, 2, 589843, 131072, 2, 720931, 327680, 2, 720932, 65536, 2)

[node name="Player" parent="." instance=ExtResource("2_i306c")]
position = Vector2(413, 314)

[node name="Camera2D" type="Camera2D" parent="Player"]

[node name="CanvasLayer" type="CanvasLayer" parent="Player/Camera2D"]

[node name="Arcane_Flux_Label" type="Label" parent="Player/Camera2D/CanvasLayer"]
unique_name_in_owner = true
offset_left = 391.0
offset_top = 188.0
offset_right = 490.0
offset_bottom = 211.0
text = "Arcane Flux: "
script = SubResource("GDScript_mgfw8")

[node name="ColorRect" type="ColorRect" parent="Player/Camera2D/CanvasLayer"]
visible = false
material = SubResource("ShaderMaterial_qsn2d")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(1, 1, 1, 0)

[node name="Items" type="Node" parent="."]

[node name="RigidBody2D" parent="Items" instance=ExtResource("1_kl6i7")]
position = Vector2(1313, 319)

[node name="RigidBody2D2" parent="Items" instance=ExtResource("1_kl6i7")]
position = Vector2(890, 400)
collision_mask = 1

[node name="RigidBody2D3" parent="Items" instance=ExtResource("1_kl6i7")]
position = Vector2(1073, 339)
rotation = -1.1698

[node name="RigidBody2D4" parent="Items" instance=ExtResource("1_kl6i7")]
position = Vector2(1020, 448)
rotation = 0.77369

[node name="RigidBody2D5" parent="Items" instance=ExtResource("1_kl6i7")]
position = Vector2(806, 318)
rotation = -1.1698

[node name="RigidBody2D6" parent="Items" instance=ExtResource("1_kl6i7")]
position = Vector2(753, 427)
rotation = 0.77369

[node name="portal" parent="." instance=ExtResource("7_rtgkr")]
position = Vector2(62, 178)
id = 1

[node name="portal2" parent="." instance=ExtResource("7_rtgkr")]
position = Vector2(443, 350)
id = 1
